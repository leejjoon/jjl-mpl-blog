[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/mpl-20231130-intro_speech_bubble/index.html",
    "href": "posts/mpl-20231130-intro_speech_bubble/index.html",
    "title": "Introducing mpl-speech-bubble",
    "section": "",
    "text": "In this post, I will introduce mpl-speech-bubble package.\nYou can install it by\n\npip install mpl-speech-bubble\n\nAnd the source code can be found at https://github.com/leejjoon/mpl-speech-bubble and documentation at https://mpl-speech-bubble.readthedocs.io/ (documentation is far from complete)\nWith mpl-speech-bubble, you can annotate you Matplotlib plot with speech bubbles, like this\n\nLet’s start with a Matplotlib’s annotate example. Note that we use “wedge” arrow style.\n\n%matplotlib inline\n\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(num=1, clear=True)\n\nxy = (0.2, 0.5)\nax.plot([xy[0]], [xy[1]], \"o\")\n\nannotate_kwargs = dict(\n    ha=\"center\", va=\"bottom\",\n    size=20,\n    bbox=dict(boxstyle=\"round, pad=0.2\",\n              fc=\"w\", ec=\"k\"),\n    arrowprops=dict(\n        arrowstyle=\"wedge, tail_width=0.5\",\n        fc=\"y\",\n        patchA=None, # by default, annotate set patchA to the bbox.\n    )\n)\n\nt = ax.annotate(\n    text=\"Default\",\n    xy=xy, xycoords='data',\n    xytext=(-0., .9), textcoords=\"offset fontsize\",\n    **annotate_kwargs\n)\n\nax.set_xlim(0, 1)\n\n(0.0, 1.0)\n\n\n\n\n\nmpl-speech-bubble has a function annotate_merged. This fucntion is mostly identical to MPL’s annotate, and at the drawing time, it will merge the bbox patch and the arrow patch. Behind the scence, it uses skia-pathops to merge bezier paths. The properties of merged patch will inherid from the bbox patch.\n\nfrom mpl_speech_bubble import annotate_merged\n\nxy = (0.5, 0.5)\nax.plot([xy[0]], [xy[1]], \"o\")\n\nt = annotate_merged(\n    ax,\n    text=\"Merged\",\n    xy=xy, xycoords='data',\n    xytext=(-0., .9), textcoords=\"offset fontsize\",\n    **annotate_kwargs\n)\n\n\n\n\nIn addtion, it provides annotate-bubble function. It has slghtly different call signature from annotate, but has an advantage of better handling of things like rotation.\nInstead of xytext and textcoords, you should use loc and dist. The unit of dist is fontsize.\n\nfrom mpl_speech_bubble import annotate_bubble\n\nxy = (0.8, 0.5)\nax.plot([xy[0]], [xy[1]], \"o\")\n\nt = annotate_bubble(\n    ax,\n    text=\"Bubble\",\n    xy=xy, xycoords='data',\n    loc=\"up\", dist=1.,\n    size=20,\n)\n\n\n\n\n\nt = annotate_bubble(\n    ax,\n    text=\"Bubble 2\",\n    xy=xy, xycoords='data',\n    loc=\"down\", dist=1.,\n    size=20, rotation=30,\n)\n\n\n\n\n\n\nannotate_bubble is a simple wrapper around AnnotationBubble class. Please take a look at the example here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JJL’s Matplotlib blog",
    "section": "",
    "text": "Introducing mpl-speech-bubble\n\n\n\n\n\n\n\n\n\n\n\n\nNov 30, 2023\n\n\nJae-Joon Lee\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "README_admin.html",
    "href": "README_admin.html",
    "title": "JJL's Matplotlib blog",
    "section": "",
    "text": "jupytext –set-formats ipynb,py:percent notebook.ipynb jupytext –sync notebook.py"
  }
]